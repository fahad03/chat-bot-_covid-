# -*- coding: utf-8 -*-
"""chatbot

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KUpmSGIrrewRDhQ1px8U6lvoBFGJREMl
"""

import nltk
import numpy as np
import random
import string
import cv2
import io

import nltk
from nltk.stem import WordNetLemmatizer
nltk.download('popular', quiet=True) # for downloading packages


nltk.download('punkt') # first-time use only
nltk.download('wordnet') # first-time use only

with open('covid-19.txt','r', encoding='utf8', errors ='ignore') as fin:
    raw_data = fin.read().lower()
    print(raw_data)
    

    #TOkenisation
sentence = nltk.sent_tokenize(raw_data)# converts to list of sentences 
word = nltk.word_tokenize(raw_data)# converts to list of words

# Preprocessing
lemmer = WordNetLemmatizer()
def LemTokens(tokens):
    return [lemmer.lemmatize(token) for token in tokens]
remove_punct_dict = dict((ord(punct), None) for punct in string.punctuation)
def LemNormalize(text):
    return LemTokens(nltk.word_tokenize(text.lower().translate(remove_punct_dict)))

GREETING_INPUTS = ("hello", "hi", "greetings", "hlo", "what's up","hey",)
GREETING_RESPONSES = [ "hey", "*nods*", "hi there", "hello", "I am glad! You are talking to me"]

def greeting(sentence):
    """If user's input is a greeting, return a greeting response"""
    for word in sentence.split():
        if word.lower() in GREETING_INPUTS:
            return random.choice(GREETING_RESPONSES)

#TF-IDF

from sklearn.feature_extraction.text import TfidfVectorizer

#cosine similarity 

from sklearn.metrics.pairwise import cosine_similarity

from IPython.display import display, Javascript
from google.colab.output import eval_js
from base64 import b64decode

def take_photo(filename='photo.jpg', quality=0.8):
  js = Javascript('''
    async function takePhoto(quality) {
      const div = document.createElement('div');
      const capture = document.createElement('button');
      capture.textContent = 'Capture';
      div.appendChild(capture);

      const video = document.createElement('video');
      video.style.display = 'block';
      const stream = await navigator.mediaDevices.getUserMedia({video: true});

      document.body.appendChild(div);
      div.appendChild(video);
      video.srcObject = stream;
      await video.play();

      // Resize the output to fit the video element.
      google.colab.output.setIframeHeight(document.documentElement.scrollHeight, true);

      // Wait for Capture to be clicked.
      await new Promise((resolve) => capture.onclick = resolve);

      const canvas = document.createElement('canvas');
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      canvas.getContext('2d').drawImage(video, 0, 0);
      stream.getVideoTracks()[0].stop();
      div.remove();
      return canvas.toDataURL('image/jpeg', quality);
    }
    ''')
  display(js)
  data = eval_js('takePhoto({})'.format(quality))
  binary = b64decode(data.split(',')[1])
  with open(filename, 'wb') as f:
    f.write(binary)
  return filename

from IPython.display import Image
try:
  filename = take_photo()
  print('Saved to {}'.format(filename))
  
  # Show the image which was just taken.
  display(Image(filename))
except Exception as err:
  # Errors will be thrown if the user does not have a webcam or if they do not
  # grant the page permission to access it.
  print(str(err))

# Generating response
def response(user_response):
    chatbot_response=''
    sentence.append(user_response)
    TfidfVec = TfidfVectorizer(tokenizer=LemNormalize, stop_words='english')
    tfidf = TfidfVec.fit_transform(sentence)
    vals = cosine_similarity(tfidf[-1], tfidf)
    idx=vals.argsort()[0][-2]
    flat = vals.flatten()
    flat.sort()
    req_tfidf = flat[-2]
    if(req_tfidf==0):
        chatbot_response=chatbot_response+"I am sorry! I don't understand you"
        return chatbot_response
    else:
        chatbot_response = chatbot_response+sentence[idx]
        return chatbot_response



flag=True
print("Covid-Bot: My name is covid_bot. I will answer your queries about Coronavirus infection. If you want to exit, type Bye!")
while(flag==True):
    user_response = input()
    user_response=user_response.lower()
    if(user_response!='bye'):
        if(user_response=='thanks' or user_response=='thank you' ):
            flag=False
            print("Covid=Bot: You are welcome..")
        else:
            if(greeting(user_response)!=None):
                print("Covid=Bot: "+greeting(user_response))
            else:
                print("Covid-Bot: ",end="")
                print(response(user_response))
                sentence.remove(user_response)
    else:
        flag=False
        print("ROBO: Bye! take care..")